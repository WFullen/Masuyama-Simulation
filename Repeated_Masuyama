function [estBias, estRmse, ntrialVec]=p03RepeatedM(ntrials,csvfile,r,plotsOn)
% p03MeasurePi(ntrials, csvfile, r plotsOn): this function creates a
% simulation method called the repeated Masuyama - this is similar to the
% regular Masuyama method, but with one major difference: if our
% randomly-generated plot does not completely overlap the stand, then
% generate another, smaller plot with area equal to the area that lies
% outside the stand. We will only stop this iteration once the overlap area
% is entirely in the stand - that is, the area is pi*r^2

% Steps for the Repeated Masuyama Simulation
% - Generate a uniform random x and y coordinate in [-r, 750+r]
% - Calculate the distance between the generated point and all of the trees
% contained within the csv file
% - Calculate the TBA within the region
% - Calculate RA and OA, the radius area and overlap area respectively
%   - if RA = 0A, then stop the iteration
%   - if OA < RA, then iterate and regenerate another plot

% INPUTS: ntrials, the number of trials for which we will run our
% simulation (this will give us a good guage of what values the bias / RMSE
% start to converge to
%         csvfile, a common separated values (CSV) file that contains the
% x and y coordinates of the trees, as well as the TBA of each tree
%         r, the radius of the plots for which we will generate our
%         simulated circles and collect the TBA
%         plotsOn, a True/False statement that determines whether or not we
%         display the RMSE and Bias of Estimate plots

% OUTPUTS: estBias, a vector of the bias estimates, gives a measure of
% how different the estimated values are (on average) from the true total,
% as a percentage of the total.
%          estRmse,a vector of the root mean square error (RMSE) estimates;
% gives a measure of the variation in t_hat as a percentage of the total.
%          ntrialVec, the number of trials at which we will calculate the
%          above estimates (this will give us around 50 points)

% This is the true TBA (we will compare our simulation estimates against
% this)

t = 311.906;

% The following instantiates the three vectors that we will be calculating
% in the simulation; the while loop constructs a vector of length ~ 50, for
% which we will calculate the bias and RMSE estimates from our simulation

k=1;

while ceil(ntrials/k) > 50
    k=k+1;
end

nSample=k;

ntrialVec= nSample:nSample:ntrials; 

estBias = zeros(1, length(ntrialVec));
estRmse = zeros(1, length(ntrialVec));

% This reads in the csv file of the trees data, and parses out three
% things: the x-coordinates, y-coordinates, and the total basal area

trees = csvread(csvfile, 1, 0);
x = trees(:,end-1);
y = trees(:,end);
ba = trees(:,3);

% In this simulation, the areas below are constant for all trees (similar
% to how they were calculated in the normal Masuyama method)

a_area = pi*r*r;
total_area = (750)^2;
pi_i = a_area / total_area;

t_hat = zeros(1, ntrials);

counter = 1;

% Below are the steps conducted in the simulation
% - (Preliminary) Create arrays for the total basal area as well as the
% number of plots it takes for each sample (this will be put into a
% histogram later)

TBA = zeros(1, ntrials);
noOfPlots = zeros(1, ntrials);

% - Calculate two random x and y-coordinates (similar to the original
% Masuyama, these can be outside the stand)
% - Calculate the distance between our random points and every tree in
%   the uploaded csv file
% - Look at the corresponding radius area (pi*r*r) and the overlap area:
%      - If they are equal, we are done: record the TBA and calculate the
%      t_hat estimate
%      - Otherwise, continue generating circles of radius equal to the area
%      outside of the stand (recording the number of plots it takes along
%      the way!

for i = 1:ntrials

    rand_center_x = (750+2*r)*rand() - r;
    rand_center_y = (750+2*r)*rand() - r;

    distance = ( ( rand_center_x - x).^2 + ( rand_center_y - y).^2);
    rnew = r;
    ra = pi*r*r;

    oa = overlapArea(rand_center_x, rand_center_y, r);
    
    noOfPlots(i) = 1;
    
    if oa < ra

        while oa < ra
            
           TBA(i) = TBA(i) + sum(ba(distance < rnew*rnew));
           rnew = sqrt( ( ra - oa) / pi );

           a = (750+2*rnew)*rand() - rnew;
           b = (750+2*rnew)*rand() - rnew;

           distance = ( ( a - x).^2 + ( b - y).^2);

           oa = overlapArea(a, b, rnew);
           ra = pi*rnew*rnew;
           
           noOfPlots(i) = noOfPlots(i) + 1;
           
        end

        TBA(i) = TBA(i) + sum(ba(distance < rnew*rnew));
        t_hat(i) = (1/pi_i)*TBA(i);

    else
        
        TBA(i) = sum(ba(distance < r*r));
        t_hat(i) = (1 / pi_i)*TBA(i);

    end

    if mod(i, nSample) == 0

        estBias(counter) = (100/t)*(mean(t_hat(1:i)) - t);
        estRmse(counter) = (100/t)*sqrt( var(t_hat(1:i)) );
        counter = counter + 1;

    end

    
end

% If the plotsOn is 'on', display the plots of the bias and RMSE estimates
% for the Repeated Masuyama Method

if strcmp(plotsOn, 'on')

   plot(ntrialVec, estBias, '*b-');
   xlabel('Number of Trials');
   ylabel('Percentage Bias of Estimate');
   title(sprintf('Percent Bias of TBA Estimate Using Repeated Masuyama Method \n ntrials = %5.0e, r = %d', ntrials, r));
   figure()
   
   plot(ntrialVec, estRmse, '*b-');
   xlabel('Number of Trials');
   ylabel('Percentage RMSE of Estimate');
   title(sprintf('Percent RMSE of TBA Estimate Using Repeated Masuyama Method \n ntrials = %5.0e, r = %d', ntrials, r));
   figure()
   
   a = histogram(noOfPlots);
   a.FaceColor = 'b';
   title(sprintf('Number of Samples vs Number of Plots using Repeated Masuyamas Method\n ntrials = %5.0e, r = %d', ntrials, r));
   xlabel('Number of Plots per Sample');
   ylabel('Number of Samples');
   
end

end


function [area] = overlapArea(x, y, r)

% overlapArea(x, y, r): This function calculates the overlap of a stand
% (which in this case, is a 750 x 750 square of points for our tree
% sampling simulation) and a randomly placed circle on the stand.

% INPUTS: x, y - the x and y-coordinates respectively that describe the
% center of the circle within the stand (or out of the stand, as is the
% case of the repeated masuyama).
%         r, the radius of the aforementioned circle

% OUTPUTS: area, the area of the overlap as determined by the geometric
% formulas listed below:

xmin = 0; ymin = 0; xmax = 750; ymax = 750;

% Note: There are MANY different cases - there is a short description
% before each as to what each conditional correpsonds to

% 1. This will create a conditionals for the left side (radius outside)
% The top conditional takes care of values close to the lower left corner,
% whereas the bottom conditional corresponds to the upper left corner
if (y > 0 && y <= 750) && (x <= 0) && ((xmin - x)^2 + (ymin - y)^2 > r^2)
    R = r;
    h = x + R;
    area = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

if (y > 0 && y <= 750) && (x <= 0) && ((xmin - x)^2 + (ymax - y)^2 > r^2)
    R = r;
    h = x + R;
    area = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

% 2. This will create a conditional for the left side (radius inside) -
% that is, the x-value is greater than 0 but no more than r (otherwise it
% would correspond to another case later on!)

if (y >= r && y <= (750 - r)) && (x > 0 && x < r)
    R = r;
    h = R - x;
    area =  pi*R*R - ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

% 3. This will create a conditional for the right (radius outside) - this
% checks to see whether or not the bottom right corner is located outside
% of the circle. If it is, we use this conditional

if (y > ymin && y < ymax) && (x >= xmax) && ((xmax - x)^2 + (ymin - y)^2 > r^2)
    R = r;
    h = R - (x - 750);
    area =  ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

% 4. This will create a conditional for the right (radius inside)
if (y >= r && y <= (750 - r)) && ((x < 750 + r) && x > (750 - r))
    R = r;
    h = (x + R) - 750;
    area =  pi*R*R - ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

% 5. This will create a conditional for the bottom (radius outside) - Note:
% this one does NOT have the conditional to look at the corners like some
% of the other tests; this is because this is taken care of in other
% conditionals

if (x > 0 && x < 750) && y < 0
    R = r;
    h = y + R;
    area = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

% 6. This will create a conditional for the bottom (radius inside)
if (x >= r && x <= (750 - r)) && (y >= 0 && y < r)
    R = r;
    h = R - y;
    area = pi*R*R - ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end 

% 7. This will create a conditional for the top (radius outside) - Note:
% this one has conditionals to look at the point in relation to the upper
% left and upper right corners; as long as the point does not contain
% either of these corners, this conditional is triggered

if (x > 0 && x < 750) && (y > 750) && ( ( (xmin - x)^2 + (ymax - y)^2 > r^2) || ((xmax - x)^2 + (ymax - y)^2 > r^2))
    R = r;
    h = 750 - (y - R);
    area = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

% 8. This will create a conditional for the top (radius inside)
if (x >= r && x <= (750 - r)) && (y <= 750 && y >= (750 - r))
    R = r;
    h = (y + R) - 750;
    area =  pi*R*R - ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
end

% 9. This will create a conditional for the lower left corner (Corner
% Outside) - Note: this is the case in which the circle overlaps both the x
% = 0 and y = 0 axis but does NOT touch the corner; in this case, we need to
% do a calculation similar to the ones that only overlap one side and just
% subtract both areas that extend outside the stand from pi*r^2

if (((xmin - x)^2 + (ymin - y)^2 > r^2) && (x > 0 && x < r) && (y > 0 && y < r))
    R = r;
    h = (R - y); i = (R - x);
    area_h = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area_i = ((R^2)*acos((R - i)/R) - (R-i)*sqrt(2*R*i - i^2));
    area = pi*R*R - (area_h + area_i);
end

% 10. This will create a condition for the lower left corner (Corner
% Inside) - Note: this is the case in which the circle DOES contain the
% corner (0,0). In this case, we can calculate the overlap area as just the
% sum of a triangle and arc (similar to what we calculated in steps 1-8

if (x >= -r && x < r) && (y >= -r && y < r) && ((xmin - x)^2 + (ymin - y)^2 <= r^2)
    R = r; yval = 0; xval = 0;
    
    x1 = x + sqrt( R^2 - (y - yval)^2 );
    y1 = y + sqrt( R^2 - (x - xval)^2 );
    
    area_tri = (1/2)*(x1)*(y1);
    
    mid_x = (x1 + xval)/2;
    mid_y = (y1 + yval)/2;
    
    dist_from_center = sqrt( (x - mid_x )^2 + (y - mid_y)^2 );
    h = R - dist_from_center;
    area_arc = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area = (area_tri + area_arc);

end 

% 11. This is a condition for the lower right corner (Corner
% Inside) - Note: this is the case in which the circle DOES contain the
% corner (750,0). In this case, we can calculate the overlap area as just the
% sum of a triangle and arc (similar to what we calculated in steps 1-8

if ( x < (xmax + r) && x > (xmax - r)) && ( (y < ymin + r) && y > (ymin - r)) && ((xmax - x)^2 + (ymin - y)^2 <= r^2)
    
    R = r; yval = 0; xval = 750;
    
    x1 = x - sqrt( R^2 - (yval - y)^2 );
    y1 = y + sqrt( R^2 - (xval - x)^2 );
    
    area_tri = (1/2)*(750 - x1)*(y1);
    
    mid_x = (x1 + xval)/2;
    mid_y = (y1 + yval)/2;
    
    dist_from_center = sqrt( (x - mid_x )^2 + (y - mid_y)^2 );
    h = R - dist_from_center;
    area_arc = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area = area_tri + area_arc;
    
end

% 12. This is a conditional for the lower right corner (Corner
% Outside) - Note: this is the case in which the circle overlaps both the x
% = 750 and y = 0 axis but does NOT touch the corner; in this case, we need
% to do a calculation similar to the ones that only overlap one side and just
% subtract both areas that extend outside the stand from pi*r^2

if ((xmax - x)^2 + (ymin - y)^2 > r^2) && (x < 750 && x > (750 - r)) && (y > 0 && y < r)
    R = r;
    h = (R - y); i = R - (750 - x);
    area_h = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area_i = ((R^2)*acos((R - i)/R) - (R-i)*sqrt(2*R*i - i^2));
    area = pi*R*R - (area_h + area_i);
end

% 13. This is a conditional for the upper right corner (Corner
% Inside) - Note: this is the case in which the circle DOES contain the
% corner (750,750). In this case, we can calculate the overlap area as just the
% sum of a triangle and arc (similar to what we calculated in steps 1-8

if ( x < (xmax + r) && x > (xmax - r)) && ( (y < ymax + r) && y > (ymax - r)) && ((xmax - x)^2 + (ymax - y)^2 < r^2)
    
    R = r; yval = 750; xval = 750;
    
    x1 = x - sqrt( R^2 - (yval - y)^2 );
    y1 = y - sqrt( R^2 - (xval - x)^2 );
    
    area_tri = (1/2)*(750 - x1)*(750 - y1);
    
    mid_x = (x1 + xval)/2;
    mid_y = (y1 + yval)/2;
    
    dist_from_center = sqrt( (x - mid_x )^2 + (y - mid_y)^2 );
    h = R - dist_from_center;
    area_arc = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area = area_tri + area_arc;
    
end

% 14. This is a conditional for the upper right corner (Corner
% Outside) - Note: this is the case in which the circle overlaps both the x
% = 750 and y = 750 axis but does NOT touch the corner; in this case, we need
% to do a calculation similar to the ones that only overlap one side and just
% subtract both areas that extend outside the stand from pi*r^2

if (xmax - x)^2 + (ymax - y)^2 > r^2 && (x < 750 && x > (750 - r)) && (y < 750 && y > (750 - r))
    R = r;
    h = R - (750 - y); i = R - (750 - x);
    area_h = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area_i = ((R^2)*acos((R - i)/R) - (R-i)*sqrt(2*R*i - i^2));
    area = pi*R*R - (area_h + area_i);
end

% 15. This is a conditional for the upper left corner (Corner
% Outside) - Note: this is the case in which the circle overlaps both the x
% = 0 and y = 750 axis but does NOT touch the corner; in this case, we need
% to do a calculation similar to the ones that only overlap one side and just
% subtract both areas that extend outside the stand from pi*r^2

if ((xmin - x)^2 + (ymax - y)^2 > r^2) && (x > xmin && x < r) && (y < ymax && y > (ymax - r))
    R = r;
    h = R - (750 - y); i = R - x;
    area_h = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area_i = ((R^2)*acos((R - i)/R) - (R-i)*sqrt(2*R*i - i^2));
    area = pi*R*R - (area_h + area_i);
end

% 16. This is a conditional for the upper left corner (Corner
% Inside) - Note: this is the case in which the circle DOES contain the
% corner (0,750). In this case, we can calculate the overlap area as just the
% sum of a triangle and arc (similar to what we calculated in steps 1-8

if (x > -r && x < r) && (y < ymax + r && y > (ymax - r)) && ((xmin - x)^2 + (ymax - y)^2 < r^2)

    R = r; yval = 750; xval = 0;
    x1 = x + sqrt( R^2 - (yval - y)^2);
    y1 = y - sqrt( R^2 - (xval - x)^2);
    
    area_tri = (1/2)*(x1)*(750 - y1);
    mid_x = (x1 + xval)/2;
    mid_y = (y1 + yval)/2;

    dist_from_center = sqrt( (x - mid_x )^2 + (y - mid_y)^2 );
    h = R - dist_from_center;
    area_arc = ((R^2)*acos((R - h)/R) - (R-h)*sqrt(2*R*h - h^2));
    area = area_tri + area_arc;

end

% 17. This is a conditional that covers a circle within all the boundaries
% (if there is no overlap within the boundaries of the stand, then the
% overlap of the area is just the area of the circle)

if (x >= xmin + r && x <= (xmax - r)) && (y >= ymin + r && y <= (ymax - r))
    
    area = pi*r*r;

end

% 18. In any of the below cases, the radius is centered outside of the main
% 750-by-750 stand; if we check and see that the corner is not contained,
% then the area of overlap is zero

if ((x < xmin) && (y < ymin)) && ((xmin - x)^2 + (ymin - y)^2 > r^2)     
    area = 0;
end

if ((x > xmax) && (y < ymin)) && ((xmax - x)^2 + (ymin - y)^2 > r^2)
    area = 0;
end

if ((x < xmin) && (y > ymax)) && ((xmin - x)^2 + (ymax - y)^2 > r^2)    
    area = 0;
end

if ((x > xmax) && (y > ymax)) && ((xmax - x)^2 + (ymax - y)^2 > r^2)   
    area = 0;
end

end
